# Generated by Django 4.1 on 2022-08-29 17:24

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_title', models.CharField(max_length=16)),
                ('book_author_name', models.CharField(max_length=16)),
                ('book_reference', models.CharField(max_length=16)),
            ],
            options={
                'verbose_name': 'Livre',
            },
        ),
        migrations.CreateModel(
            name='BookCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=16)),
                ('category_slug', models.SlugField()),
            ],
            options={
                'verbose_name': 'Catégorie de livre',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name', models.CharField(blank=True, max_length=16, null=True)),
                ('address', models.CharField(blank=True, max_length=60, null=True)),
                ('zipcode', models.CharField(blank=True, max_length=8, null=True)),
            ],
            options={
                'verbose_name': 'Ville',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=60)),
                ('client_mail', models.EmailField(max_length=254)),
                ('client_reference_number', models.PositiveSmallIntegerField()),
                ('client_address', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ville_et_adresse', to='crm_app.city')),
            ],
            options={
                'verbose_name': 'client',
            },
        ),
        migrations.CreateModel(
            name='PhoneModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
            ],
        ),
        migrations.CreateModel(
            name='SocioProfessionnalCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name_socio_professionnal', models.CharField(blank=True, max_length=20, null=True)),
                ('category_code_socio_professionnal', models.CharField(blank=True, max_length=20, null=True)),
                ('slug', models.SlugField()),
            ],
            options={
                'verbose_name': 'Catégorie Socio-Professionnelle',
            },
        ),
        migrations.CreateModel(
            name='PublisherHouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publishing_house_name', models.CharField(max_length=30)),
                ('publisher_contact_mail', models.EmailField(max_length=254)),
                ('publisher_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm_app.city')),
            ],
        ),
        migrations.CreateModel(
            name='Ordered',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_books', models.PositiveSmallIntegerField()),
                ('date_of_creation_order', models.DateTimeField(blank=True, null=True)),
                ('date_of_expected_reception_after_order', models.DateTimeField(blank=True, null=True)),
                ('date_of_effective_return_after_order', models.DateTimeField(blank=True, null=True)),
                ('ordered_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm_app.book')),
                ('ordered_to_publisher', models.ManyToManyField(to='crm_app.publisherhouse')),
            ],
            options={
                'verbose_name': 'Commande',
            },
        ),
        migrations.CreateModel(
            name='ClientCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_creation_card', models.DateTimeField()),
                ('date_of_expiry_card', models.DateTimeField()),
                ('client_card_reference', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reference_client', to='crm_app.client')),
            ],
            options={
                'verbose_name': 'Carte adhérent',
            },
        ),
        migrations.AddField(
            model_name='client',
            name='socio_professionnal_category',
            field=models.ManyToManyField(to='crm_app.socioprofessionnalcategory'),
        ),
        migrations.CreateModel(
            name='BorrowedBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_borrow', models.DateTimeField()),
                ('date_of_expected_return', models.DateTimeField()),
                ('date_of_effective_return', models.DateTimeField(blank=True, null=True)),
                ('book_borrowed', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crm_app.book')),
                ('client_reference', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='crm_app.client')),
            ],
            options={
                'verbose_name': 'Livres empruntés',
            },
        ),
        migrations.AddField(
            model_name='book',
            name='category_book',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='crm_app.bookcategory'),
        ),
        migrations.AddField(
            model_name='book',
            name='publisher_reference',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crm_app.publisherhouse'),
        ),
        migrations.CreateModel(
            name='Archive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archive_stock', models.PositiveSmallIntegerField()),
                ('book_reference', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='crm_app.book')),
            ],
            options={
                'verbose_name': 'Archive',
            },
        ),
        migrations.CreateModel(
            name='UserManagementSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(blank=True, max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('city', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='crm_app.city')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
